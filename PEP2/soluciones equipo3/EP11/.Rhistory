replace = FALSE )
# Asignar elementos a los dos grupos .
permutacion_1 <- permutacion [1 : n_1]
permutacion_2 <- permutacion [ n_1 + 1 : n_2]
# Calcular y devolver la diferencia de medias .
return(mean(permutacion_1) - mean(permutacion_2))
}
set.seed(450)   # se fija una semilla aleatoria
# se obtienen los datos, por cierto, es necesario seleccionar el archivo desde la ventana que emerge
datos <- read_excel(file.choose())
datos <- sample_n(datos, 450)   # se seleccionan 500 hogares aleatoriamente
datos <- datos %>% select(region, sexo, e7.subarea, ytotcorh)
datosH <- datos %>% filter(region == "Región Metropolitana de Santiago" & e7.subarea != "NA" & sexo=="Hombre")
datosM <- datos %>% filter(region == "Región Metropolitana de Santiago" & e7.subarea != "NA" & sexo=="Mujer")
print(datosM)
print(datosH)
cat (" Prueba de permutaciones \n\n")
cat (" Hipótesis alternativa :\n")
observado <- mean(datosH$ytotcorh, na.rm = TRUE) - mean(datosM$ytotcorh, na.rm = TRUE) #se calcula la diferencia de las medias.
cat (" Valor observado :", observado , "\n")
repeticiones=5999
muestra_1<-datosH$ytotcorh
muestra_2<-datosM$ytotcorh
distribucion <- rep(NA, repeticiones)
for ( i in 1: repeticiones ) {
distribucion [ i ] <- permutar( muestra_1 , muestra_2 )
}
# se importan librerÃ­as
require(ez)
library(ggpubr)
library(tidyr)
library(dplyr)
library(boot)
library (simpleboot)
library(bootES)
require (readxl)
# Funci ón para hacer una permutaci ón y calcular el estad í stico
# de inter és.
# Argumentos :
# - muestra _1 , muestra _2: vectores num é ricos con las muestras a comparar .
# Valor :
# - diferencia E_1 - E _2.
permutar <- function (muestra_1, muestra_2) {
n_1 <- length(muestra_1)
n_2 <- length(muestra_2)
# Hacer la permutaci ón.
permutacion <- sample (c( muestra_1 , muestra_2) , size = n_1 + n_2,
replace = FALSE )
# Asignar elementos a los dos grupos .
permutacion_1 <- permutacion [1 : n_1]
permutacion_2 <- permutacion [ n_1 + 1 : n_2]
# Calcular y devolver la diferencia de medias .
return(mean(permutacion_1) - mean(permutacion_2))
}
# Funci ón para calcular el valor p.
# Argumentos :
# - distribucion : distribuci ón nula del estad í stico de inter és.
# - valor _ observado : valor del estad í stico de inter és para las muestras
# originales .
# - repeticiones : cantidad de permutaciones a realizar .
# - alternative : tipo de hipó tesis alternativa . "two. sided " para
# hipó tesis bilateral , " greater " o " less " para hip ó tesis unilaterales .
# Valor :
# - el valorp calculado .
calcular_valor_p <- function ( distribucion , valor_observado ,
repeticiones , alternative ) {
if( alternative == " two. sided ") {
numerador <- sum(abs( distribucion ) > abs ( valor_observado ) ) + 1
denominador <- repeticiones + 1
valor_p <- numerador / denominador
}
else if( alternative == " greater ") {
numerador <- sum( distribucion > valor_observado ) + 1
denominador <- repeticiones + 1
valor_p <- numerador / denominador
}
else {
numerador <- sum( distribucion < valor_observado ) + 1
denominador <- repeticiones + 1
valor_p <- numerador / denominador
}
return ( valor_p )
}
# Funci ón para graficar una distribuci ón.
# Argumentos :
# - distribucion : distribuci ón nula del estad í stico de inter és.
# - ...: otros argumentos a ser entregados a gghistogram y ggqqplot .
graficar_distribucion <- function ( distribucion , ...) {
observaciones <- data.frame ( distribucion )
histograma <- gghistogram ( observaciones , x = " distribucion ",
xlab = " Estad í stico de inter és",
ylab = " Frecuencia ", ...)
qq <- ggqqplot ( observaciones , x = " distribucion ", ...)
# Crear una ú nica figura con todos los grá ficos de dispersi ón.
figura <- ggarrange ( histograma , qq , ncol = 2 , nrow = 1)
print ( figura )
}
----------------------------
set.seed(450)   # se fija una semilla aleatoria
# se obtienen los datos, por cierto, es necesario seleccionar el archivo desde la ventana que emerge
datos <- read_excel(file.choose())
datos <- sample_n(datos, 450)   # se seleccionan 500 hogares aleatoriamente
datos <- datos %>% select(region, sexo, e7.subarea, ytotcorh)
datosH <- datos %>% filter(region == "Región Metropolitana de Santiago" & e7.subarea != "NA" & sexo=="Hombre")
datosM <- datos %>% filter(region == "Región Metropolitana de Santiago" & e7.subarea != "NA" & sexo=="Mujer")
print(datosM)
print(datosH)
cat (" Prueba de permutaciones \n\n")
cat (" Hipótesis alternativa :\n")
observado <- mean(datosH$ytotcorh, na.rm = TRUE) - mean(datosM$ytotcorh, na.rm = TRUE) #se calcula la diferencia de las medias.
cat (" Valor observado :", observado , "\n")
repeticiones=5999
muestra_1<-datosH$ytotcorh
muestra_2<-datosM$ytotcorh
distribucion <- rep(NA, repeticiones)
for ( i in 1: repeticiones ) {
distribucion [ i ] <- permutar( muestra_1 , muestra_2 )
}
graficar_distribucion(distribucion , ...)
valor_p <- calcular_valor_p (distribucion, observado, repeticiones,
"two. sided")
cat (" Valor p:", valor _p , "\n\n")
# se importan librerÃ­as
require(ez)
library(ggpubr)
library(tidyr)
library(dplyr)
library(boot)
library (simpleboot)
library(bootES)
require (readxl)
# Funci ón para hacer una permutaci ón y calcular el estad í stico
# de inter és.
# Argumentos :
# - muestra _1 , muestra _2: vectores num é ricos con las muestras a comparar .
# Valor :
# - diferencia E_1 - E _2.
permutar <- function (muestra_1, muestra_2) {
n_1 <- length(muestra_1)
n_2 <- length(muestra_2)
# Hacer la permutaci ón.
permutacion <- sample (c( muestra_1 , muestra_2) , size = n_1 + n_2,
replace = FALSE )
# Asignar elementos a los dos grupos .
permutacion_1 <- permutacion [1 : n_1]
permutacion_2 <- permutacion [ n_1 + 1 : n_2]
# Calcular y devolver la diferencia de medias .
return(mean(permutacion_1) - mean(permutacion_2))
}
# Funci ón para calcular el valor p.
# Argumentos :
# - distribucion : distribuci ón nula del estad í stico de inter és.
# - valor _ observado : valor del estad í stico de inter és para las muestras
# originales .
# - repeticiones : cantidad de permutaciones a realizar .
# - alternative : tipo de hipó tesis alternativa . "two. sided " para
# hipó tesis bilateral , " greater " o " less " para hip ó tesis unilaterales .
# Valor :
# - el valorp calculado .
calcular_valor_p <- function ( distribucion , valor_observado ,
repeticiones , alternative ) {
if( alternative == " two. sided ") {
numerador <- sum(abs( distribucion ) > abs ( valor_observado ) ) + 1
denominador <- repeticiones + 1
valor_p <- numerador / denominador
}
else if( alternative == " greater ") {
numerador <- sum( distribucion > valor_observado ) + 1
denominador <- repeticiones + 1
valor_p <- numerador / denominador
}
else {
numerador <- sum( distribucion < valor_observado ) + 1
denominador <- repeticiones + 1
valor_p <- numerador / denominador
}
return ( valor_p )
}
# Funci ón para graficar una distribuci ón.
# Argumentos :
# - distribucion : distribuci ón nula del estad í stico de inter és.
# - ...: otros argumentos a ser entregados a gghistogram y ggqqplot .
graficar_distribucion <- function ( distribucion , ...) {
observaciones <- data.frame ( distribucion )
histograma <- gghistogram ( observaciones , x = " distribucion ",
xlab = " Estad í stico de inter és",
ylab = " Frecuencia ", ...)
qq <- ggqqplot ( observaciones , x = " distribucion ", ...)
# Crear una ú nica figura con todos los grá ficos de dispersi ón.
figura <- ggarrange ( histograma , qq , ncol = 2 , nrow = 1)
print ( figura )
}
----------------------------
set.seed(450)   # se fija una semilla aleatoria
# se obtienen los datos, por cierto, es necesario seleccionar el archivo desde la ventana que emerge
datos <- read_excel(file.choose())
datos <- sample_n(datos, 450)   # se seleccionan 500 hogares aleatoriamente
datos <- datos %>% select(region, sexo, e7.subarea, ytotcorh)
datosH <- datos %>% filter(region == "Región Metropolitana de Santiago" & e7.subarea != "NA" & sexo=="Hombre")
datosM <- datos %>% filter(region == "Región Metropolitana de Santiago" & e7.subarea != "NA" & sexo=="Mujer")
print(datosM)
print(datosH)
cat (" Prueba de permutaciones \n\n")
cat (" Hipótesis alternativa :\n")
observado <- mean(datosH$ytotcorh, na.rm = TRUE) - mean(datosM$ytotcorh, na.rm = TRUE) #se calcula la diferencia de las medias.
cat (" Valor observado :", observado , "\n")
repeticiones=5999
muestra_1<-datosH$ytotcorh
muestra_2<-datosM$ytotcorh
distribucion <- rep(NA, repeticiones)
for ( i in 1: repeticiones ) {
distribucion [ i ] <- permutar( muestra_1 , muestra_2 )
}
graficar_distribucion(distribucion , ...)
valor_p <- calcular_valor_p (distribucion, observado, repeticiones,
"two. sided")
cat(" Valor p:", valor_p , "\n\n")
# se importan librerÃ­as
require(ez)
library(ggpubr)
library(tidyr)
library(dplyr)
library(boot)
library (simpleboot)
library(bootES)
require (readxl)
# Funci ón para hacer una permutaci ón y calcular el estad í stico
# de inter és.
# Argumentos :
# - muestra _1 , muestra _2: vectores num é ricos con las muestras a comparar .
# Valor :
# - diferencia E_1 - E _2.
permutar <- function (muestra_1, muestra_2) {
n_1 <- length(muestra_1)
n_2 <- length(muestra_2)
# Hacer la permutaci ón.
permutacion <- sample (c( muestra_1 , muestra_2) , size = n_1 + n_2,
replace = FALSE )
# Asignar elementos a los dos grupos .
permutacion_1 <- permutacion [1 : n_1]
permutacion_2 <- permutacion [ n_1 + 1 : n_2]
# Calcular y devolver la diferencia de medias .
return(mean(permutacion_1) - mean(permutacion_2))
}
# Funci ón para calcular el valor p.
# Argumentos :
# - distribucion : distribuci ón nula del estad í stico de inter és.
# - valor _ observado : valor del estad í stico de inter és para las muestras
# originales .
# - repeticiones : cantidad de permutaciones a realizar .
# - alternative : tipo de hipó tesis alternativa . "two. sided " para
# hipó tesis bilateral , " greater " o " less " para hip ó tesis unilaterales .
# Valor :
# - el valorp calculado .
calcular_valor_p <- function ( distribucion , valor_observado ,
repeticiones , alternative ) {
if( alternative == " two. sided ") {
numerador <- sum(abs( distribucion ) > abs ( valor_observado ) ) + 1
denominador <- repeticiones + 1
valor_p <- numerador / denominador
}
else if( alternative == " greater ") {
numerador <- sum( distribucion > valor_observado ) + 1
denominador <- repeticiones + 1
valor_p <- numerador / denominador
}
else {
numerador <- sum( distribucion < valor_observado ) + 1
denominador <- repeticiones + 1
valor_p <- numerador / denominador
}
return ( valor_p )
}
# Funci ón para graficar una distribuci ón.
# Argumentos :
# - distribucion : distribuci ón nula del estad í stico de inter és.
# - ...: otros argumentos a ser entregados a gghistogram y ggqqplot .
graficar_distribucion <- function ( distribucion , ...) {
observaciones <- data.frame ( distribucion )
histograma <- gghistogram ( observaciones , x = " distribucion ",
xlab = " Estad í stico de inter és",
ylab = " Frecuencia ", ...)
qq <- ggqqplot ( observaciones , x = " distribucion ", ...)
# Crear una ú nica figura con todos los grá ficos de dispersi ón.
figura <- ggarrange ( histograma , qq , ncol = 2 , nrow = 1)
print ( figura )
}
----------------------------
set.seed(450)   # se fija una semilla aleatoria
# se obtienen los datos, por cierto, es necesario seleccionar el archivo desde la ventana que emerge
datos <- read_excel(file.choose())
datos <- sample_n(datos, 450)   # se seleccionan 500 hogares aleatoriamente
datos <- datos %>% select(region, sexo, e7.subarea, ytotcorh)
datosH <- datos %>% filter(region == "Región Metropolitana de Santiago" & e7.subarea != "NA" & sexo=="Hombre")
datosM <- datos %>% filter(region == "Región Metropolitana de Santiago" & e7.subarea != "NA" & sexo=="Mujer")
print(datosM)
print(datosH)
cat (" Prueba de permutaciones \n\n")
cat (" Hipótesis alternativa :\n")
observado <- mean(datosH$ytotcorh, na.rm = TRUE) - mean(datosM$ytotcorh, na.rm = TRUE) #se calcula la diferencia de las medias.
cat (" Valor observado :", observado , "\n")
repeticiones=5999
muestra_1<-datosH$ytotcorh
muestra_2<-datosM$ytotcorh
distribucion <- rep(NA, repeticiones)
for ( i in 1: repeticiones ) {
distribucion [ i ] <- permutar( muestra_1 , muestra_2 )
}
graficar_distribucion(distribucion, ...)
valor_p <- calcular_valor_p (distribucion, observado, repeticiones,
"two. sided")
cat(" Valor p:", valor_p , "\n\n")
# se importan librerÃ­as
require(ez)
library(ggpubr)
library(tidyr)
library(dplyr)
library(boot)
library (simpleboot)
library(bootES)
require (readxl)
# Funci ón para hacer una permutaci ón y calcular el estad í stico
# de inter és.
# Argumentos :
# - muestra _1 , muestra _2: vectores num é ricos con las muestras a comparar .
# Valor :
# - diferencia E_1 - E _2.
permutar <- function (muestra_1, muestra_2) {
n_1 <- length(muestra_1)
n_2 <- length(muestra_2)
# Hacer la permutaci ón.
permutacion <- sample (c( muestra_1 , muestra_2) , size = n_1 + n_2,
replace = FALSE )
# Asignar elementos a los dos grupos .
permutacion_1 <- permutacion [1 : n_1]
permutacion_2 <- permutacion [ n_1 + 1 : n_2]
# Calcular y devolver la diferencia de medias .
return(mean(permutacion_1) - mean(permutacion_2))
}
# Funci ón para calcular el valor p.
# Argumentos :
# - distribucion : distribuci ón nula del estad í stico de inter és.
# - valor _ observado : valor del estad í stico de inter és para las muestras
# originales .
# - repeticiones : cantidad de permutaciones a realizar .
# - alternative : tipo de hipó tesis alternativa . "two. sided " para
# hipó tesis bilateral , " greater " o " less " para hip ó tesis unilaterales .
# Valor :
# - el valorp calculado .
calcular_valor_p <- function ( distribucion , valor_observado ,
repeticiones , alternative ) {
if( alternative == " two. sided ") {
numerador <- sum(abs( distribucion ) > abs ( valor_observado ) ) + 1
denominador <- repeticiones + 1
valor_p <- numerador / denominador
}
else if( alternative == " greater ") {
numerador <- sum( distribucion > valor_observado ) + 1
denominador <- repeticiones + 1
valor_p <- numerador / denominador
}
else {
numerador <- sum( distribucion < valor_observado ) + 1
denominador <- repeticiones + 1
valor_p <- numerador / denominador
}
return ( valor_p )
}
# Funci ón para graficar una distribuci ón.
# Argumentos :
# - distribucion : distribuci ón nula del estad í stico de inter és.
# - ...: otros argumentos a ser entregados a gghistogram y ggqqplot .
graficar_distribucion <- function ( distribucion , ...) {
observaciones <- data.frame ( distribucion )
histograma <- gghistogram ( observaciones , x = " distribucion ",
xlab = " Estad í stico de inter és",
ylab = " Frecuencia ", ...)
qq <- ggqqplot ( observaciones , x = " distribucion ", ...)
# Crear una ú nica figura con todos los grá ficos de dispersi ón.
figura <- ggarrange ( histograma , qq , ncol = 2 , nrow = 1)
print ( figura )
}
----------------------------
set.seed(450)   # se fija una semilla aleatoria
# se obtienen los datos, por cierto, es necesario seleccionar el archivo desde la ventana que emerge
datos <- read_excel(file.choose())
datos <- sample_n(datos, 450)   # se seleccionan 500 hogares aleatoriamente
datos <- datos %>% select(region, sexo, e7.subarea, ytotcorh)
datosH <- datos %>% filter(region == "Región Metropolitana de Santiago" & e7.subarea != "NA" & sexo=="Hombre")
datosM <- datos %>% filter(region == "Región Metropolitana de Santiago" & e7.subarea != "NA" & sexo=="Mujer")
print(datosM)
print(datosH)
cat (" Prueba de permutaciones \n\n")
cat (" Hipótesis alternativa :\n")
observado <- mean(datosH$ytotcorh, na.rm = TRUE) - mean(datosM$ytotcorh, na.rm = TRUE) #se calcula la diferencia de las medias.
cat (" Valor observado :", observado , "\n")
repeticiones=5999
muestra_1<-datosH$ytotcorh
muestra_2<-datosM$ytotcorh
distribucion <- rep(NA, repeticiones)
for ( i in 1: repeticiones ) {
distribucion [ i ] <- permutar( muestra_1 , muestra_2 )
}
graficar_distribucion(distribucion)
valor_p <- calcular_valor_p (distribucion, observado, repeticiones,
"two. sided")
cat(" Valor p:", valor_p , "\n\n")
# se importan librerÃ­as
require(ez)
library(ggpubr)
library(tidyr)
library(dplyr)
library(boot)
library (simpleboot)
library(bootES)
require (readxl)
# Funci ón para hacer una permutaci ón y calcular el estad í stico
# de inter és.
# Argumentos :
# - muestra _1 , muestra _2: vectores num é ricos con las muestras a comparar .
# Valor :
# - diferencia E_1 - E _2.
permutar <- function (muestra_1, muestra_2) {
n_1 <- length(muestra_1)
n_2 <- length(muestra_2)
# Hacer la permutaci ón.
permutacion <- sample (c( muestra_1 , muestra_2) , size = n_1 + n_2,
replace = FALSE )
# Asignar elementos a los dos grupos .
permutacion_1 <- permutacion [1 : n_1]
permutacion_2 <- permutacion [ n_1 + 1 : n_2]
# Calcular y devolver la diferencia de medias .
return(mean(permutacion_1) - mean(permutacion_2))
}
# Funci ón para calcular el valor p.
# Argumentos :
# - distribucion : distribuci ón nula del estad í stico de inter és.
# - valor _ observado : valor del estad í stico de inter és para las muestras
# originales .
# - repeticiones : cantidad de permutaciones a realizar .
# - alternative : tipo de hipó tesis alternativa . "two. sided " para
# hipó tesis bilateral , " greater " o " less " para hip ó tesis unilaterales .
# Valor :
# - el valorp calculado .
calcular_valor_p <- function ( distribucion , valor_observado ,
repeticiones , alternative ) {
if( alternative == " two. sided ") {
numerador <- sum(abs( distribucion ) > abs ( valor_observado ) ) + 1
denominador <- repeticiones + 1
valor_p <- numerador / denominador
}
else if( alternative == " greater ") {
numerador <- sum( distribucion > valor_observado ) + 1
denominador <- repeticiones + 1
valor_p <- numerador / denominador
}
else {
numerador <- sum( distribucion < valor_observado ) + 1
denominador <- repeticiones + 1
valor_p <- numerador / denominador
}
return ( valor_p )
}
# Funci ón para graficar una distribuci ón.
# Argumentos :
# - distribucion : distribuci ón nula del estad í stico de inter és.
# - ...: otros argumentos a ser entregados a gghistogram y ggqqplot .
graficar_distribucion <- function ( distribucion , ...) {
observaciones <- data.frame(distribucion)
histograma <- gghistogram ( observaciones , x = "distribucion",
xlab = " Estadístico de interés",
ylab = " Frecuencia", ...)
qq <- ggqqplot ( observaciones , x = "distribucion", ...)
# Crear una ú nica figura con todos los grá ficos de dispersi ón.
figura <- ggarrange ( histograma , qq , ncol = 2 , nrow = 1)
print ( figura )
}
----------------------------
set.seed(450)   # se fija una semilla aleatoria
# se obtienen los datos, por cierto, es necesario seleccionar el archivo desde la ventana que emerge
datos <- read_excel(file.choose())
datos <- sample_n(datos, 450)   # se seleccionan 500 hogares aleatoriamente
datos <- datos %>% select(region, sexo, e7.subarea, ytotcorh)
datosH <- datos %>% filter(region == "Región Metropolitana de Santiago" & e7.subarea != "NA" & sexo=="Hombre")
datosM <- datos %>% filter(region == "Región Metropolitana de Santiago" & e7.subarea != "NA" & sexo=="Mujer")
print(datosM)
print(datosH)
cat (" Prueba de permutaciones \n\n")
cat (" Hipótesis alternativa :\n")
observado <- mean(datosH$ytotcorh, na.rm = TRUE) - mean(datosM$ytotcorh, na.rm = TRUE) #se calcula la diferencia de las medias.
cat (" Valor observado :", observado , "\n")
repeticiones=5999
muestra_1<-datosH$ytotcorh
muestra_2<-datosM$ytotcorh
distribucion <- rep(NA, repeticiones)
for ( i in 1: repeticiones ) {
distribucion [ i ] <- permutar( muestra_1 , muestra_2 )
}
graficar_distribucion(distribucion)
valor_p <- calcular_valor_p (distribucion, observado, repeticiones,
"two. sided")
cat(" Valor p:", valor_p , "\n\n")
source("C:/Users/StephanSilva/Desktop/Programas USACH/IME/EP/EP-08/EP11/EP11-respuesta-sala-3.r", encoding = 'UTF-8', echo=TRUE)
source("C:/Users/StephanSilva/Desktop/Programas USACH/IME/EP/EP-08/EP11/EP11-respuesta-sala-3.r", encoding = 'UTF-8', echo=TRUE)
source("C:/Users/StephanSilva/Desktop/Programas USACH/IME/EP/EP-08/EP11/EP11-respuesta-sala-3.r", encoding = 'UTF-8', echo=TRUE)
source("C:/Users/StephanSilva/Desktop/Programas USACH/IME/EP/EP-08/EP11/EP11-respuesta-sala-3.r", encoding = 'UTF-8', echo=TRUE)
source("C:/Users/StephanSilva/Desktop/Programas USACH/IME/EP/EP-08/EP11/EP11-respuesta-sala-3.r", encoding = 'UTF-8', echo=TRUE)
source("C:/Users/StephanSilva/Desktop/Programas USACH/IME/EP/EP-08/EP11/EP11-respuesta-sala-3.r", encoding = 'UTF-8', echo=TRUE)
source("C:/Users/StephanSilva/Desktop/Programas USACH/IME/EP/EP-08/EP11/EP11-respuesta-sala-3.r", encoding = 'UTF-8', echo=TRUE)
source("C:/Users/StephanSilva/Desktop/Programas USACH/IME/EP/EP-08/EP11/EP11-respuesta-sala-3.r", encoding = 'UTF-8', echo=TRUE)
View(datos)
source("C:/Users/StephanSilva/Desktop/Programas USACH/IME/EP/EP-08/EP11/EP11-respuesta-sala-3.r", encoding = 'UTF-8', echo=TRUE)
